{
  "{\"assumptions\":{},\"sourceRoot\":\"C:\\\\Users\\\\manohar\\\\wiki\\\\GITHUB\\\\CSULB_CECS_Wiki\\\\wiki-backend\\\\\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"C:\\\\Users\\\\manohar\\\\wiki\\\\GITHUB\\\\CSULB_CECS_Wiki\\\\wiki-backend\",\"filename\":\"C:\\\\Users\\\\manohar\\\\wiki\\\\GITHUB\\\\CSULB_CECS_Wiki\\\\wiki-backend\\\\app.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\manohar\\\\wiki\\\\GITHUB\\\\CSULB_CECS_Wiki\\\\wiki-backend\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.13.13": {
    "metadata": {},
    "options": {
      "assumptions": {},
      "sourceRoot": "C:\\Users\\manohar\\wiki\\GITHUB\\CSULB_CECS_Wiki\\wiki-backend\\",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "C:\\Users\\manohar\\wiki\\GITHUB\\CSULB_CECS_Wiki\\wiki-backend",
      "filename": "C:\\Users\\manohar\\wiki\\GITHUB\\CSULB_CECS_Wiki\\wiki-backend\\app.js",
      "targets": {},
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "browserslistConfigFile": false,
      "envName": "development",
      "root": "C:\\Users\\manohar\\wiki\\GITHUB\\CSULB_CECS_Wiki\\wiki-backend",
      "rootMode": "root",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Users\\manohar\\wiki\\GITHUB\\CSULB_CECS_Wiki\\wiki-backend\\app.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "C:\\Users\\manohar\\wiki\\GITHUB\\CSULB_CECS_Wiki\\wiki-backend\\app.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Users\\manohar\\wiki\\GITHUB\\CSULB_CECS_Wiki\\wiki-backend\\",
        "sourceFileName": "app.js"
      }
    },
    "ast": null,
    "code": "const express = require('express');\n\nconst cors = require('cors');\n\nconst mysql = require('mysql');\n\nconst port = 5000;\nconst app = express();\nconst connection = mysql.createConnection({\n  host: 'beachcs.csvzol9wwuhi.us-west-1.rds.amazonaws.com',\n  user: 'admin',\n  password: 'FeiHoffman123',\n  database: 'BeachCS'\n});\nconnection.connect(err => {\n  if (err) {\n    return err;\n  }\n});\napp.use(cors({\n  origin: 'http://localhost:3000/'\n}));\napp.use(express.json());\napp.use(express.urlencoded({\n  extended: false\n}));\nlet SELECT_A_COURSE_QUERY = ``;\nlet ADD_ACCOUNT = ``;\nlet VERIFY_ACCOUNT = ``;\nlet newLogin = {};\n\nfunction createQuery(selectedCourse) {\n  SELECT_A_COURSE_QUERY = `SELECT * FROM courses WHERE courseName = \"${selectedCourse.CourseNumber}\"`;\n}\n\nfunction addAccount(newAccount) {\n  ADD_ACCOUNT = `INSERT INTO administrators(email, password) VALUES(\"${newAccount.email}\", \"${newAccount.password}\")`;\n}\n\nfunction createLogin(newLogin) {\n  VERIFY_ACCOUNT = `SELECT * FROM administrators WHERE email = \"${newLogin.email}\"`;\n}\n\napp.post('/create', function (req, res) {\n  let newCourse = {\n    CourseNumber: req.body.courseNum\n  };\n  createQuery(newCourse);\n  res.send(\"DONE\");\n});\napp.post('/createAccount', function (req, res) {\n  let newAccount = {\n    email: req.body.newEmail,\n    password: req.body.newPassword\n  };\n  addAccount(newAccount);\n  connection.query(ADD_ACCOUNT);\n  res.send(\"DONE\");\n});\napp.post('/createLogin', function (req, res) {\n  newLogin = {\n    email: req.body.newEmail,\n    password: req.body.newPassword\n  };\n  createLogin(newLogin);\n  res.send(\"DONE\");\n});\napp.get('/verifyLogin', (req, res) => {\n  connection.query(VERIFY_ACCOUNT, function (err, results) {\n    try {\n      if (newLogin.password != results[0].password) {\n        console.log(\"Incorrect Password\");\n        res.send(\"INCORRECT PASSWORD\");\n      } else if (newLogin.email === results[0].email && newLogin.password === results[0].password) {\n        var email = results[0].email;\n        console.log(\"Success\");\n        res.send({\n          email\n        });\n      }\n    } catch (TypeError) {\n      console.log(\"Incorrect Email\");\n      res.send(\"INCORRECT EMAIL\");\n    }\n  });\n});\napp.get('/selectCourse', (req, res) => {\n  connection.query(SELECT_A_COURSE_QUERY, function (err, results) {\n    var courseNumber = results[0].courseName;\n    var courseDescription = results[0].description;\n    var coursePrerequisites = results[0].prereqs;\n    var courseCredits = results[0].credits;\n    res.send({\n      courseNumber,\n      courseDescription,\n      coursePrerequisites,\n      courseCredits\n    });\n  });\n});\napp.get('/events', function (req, res) {\n  var sql = 'SELECT * FROM events';\n  connection.query(sql, function (err, rows) {\n    if (err) {\n      res.json({\n        Error: true,\n        Message: 'Error Execute Sql',\n        err\n      });\n    } else {\n      // res.json({ \"Error\": false, \"Message\": \"Success\", \"Visitors\": rows });\n      res.json(rows);\n    }\n  });\n});\napp.listen(port, () => console.log(`Example app listening on port \"${port}\"`));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJleHByZXNzIiwicmVxdWlyZSIsImNvcnMiLCJteXNxbCIsInBvcnQiLCJhcHAiLCJjb25uZWN0aW9uIiwiY3JlYXRlQ29ubmVjdGlvbiIsImhvc3QiLCJ1c2VyIiwicGFzc3dvcmQiLCJkYXRhYmFzZSIsImNvbm5lY3QiLCJlcnIiLCJ1c2UiLCJvcmlnaW4iLCJqc29uIiwidXJsZW5jb2RlZCIsImV4dGVuZGVkIiwiU0VMRUNUX0FfQ09VUlNFX1FVRVJZIiwiQUREX0FDQ09VTlQiLCJWRVJJRllfQUNDT1VOVCIsIm5ld0xvZ2luIiwiY3JlYXRlUXVlcnkiLCJzZWxlY3RlZENvdXJzZSIsIkNvdXJzZU51bWJlciIsImFkZEFjY291bnQiLCJuZXdBY2NvdW50IiwiZW1haWwiLCJjcmVhdGVMb2dpbiIsInBvc3QiLCJyZXEiLCJyZXMiLCJuZXdDb3Vyc2UiLCJib2R5IiwiY291cnNlTnVtIiwic2VuZCIsIm5ld0VtYWlsIiwibmV3UGFzc3dvcmQiLCJxdWVyeSIsImdldCIsInJlc3VsdHMiLCJjb25zb2xlIiwibG9nIiwiVHlwZUVycm9yIiwiY291cnNlTnVtYmVyIiwiY291cnNlTmFtZSIsImNvdXJzZURlc2NyaXB0aW9uIiwiZGVzY3JpcHRpb24iLCJjb3Vyc2VQcmVyZXF1aXNpdGVzIiwicHJlcmVxcyIsImNvdXJzZUNyZWRpdHMiLCJjcmVkaXRzIiwic3FsIiwicm93cyIsIkVycm9yIiwiTWVzc2FnZSIsImxpc3RlbiJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsT0FBTyxHQUFHQyxPQUFPLENBQUMsU0FBRCxDQUF2Qjs7QUFDQSxNQUFNQyxJQUFJLEdBQUdELE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLE1BQU1FLEtBQUssR0FBR0YsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsTUFBTUcsSUFBSSxHQUFHLElBQWI7QUFFQSxNQUFNQyxHQUFHLEdBQUdMLE9BQU8sRUFBbkI7QUFFQSxNQUFNTSxVQUFVLEdBQUdI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Q0FBUCxDQUFXTyxXQUFuQztBQUNBLFFBQUlDLG1CQUFtQixHQUFHUixPQUFPLENBQUMsQ0FBRCxDQUFQLENBQVdTLE9BQXJDO0FBQ0EsUUFBSUMsYUFBYSxHQUFHVixPQUFPLENBQUMsQ0FBRCxDQUFQLENBQVdXLE9BQS9CO0FBQ0FwQixJQUFBQSxHQUFHLENBQUNJLElBQUosQ0FBUztBQUFFUyxNQUFBQSxZQUFGO0FBQWdCRSxNQUFBQSxpQkFBaEI7QUFBbUNFLE1BQUFBLG1CQUFuQztBQUF3REUsTUFBQUE7QUFBeEQsS0FBVDtBQUNILEdBUEw7QUFTSCxDQVZEO0FBWUE5QyxHQUFHLENBQUNtQyxHQUFKLENBQVEsU0FBUixFQUFtQixVQUFVVCxHQUFWLEVBQWVDLEdBQWYsRUFBb0I7QUFDbkMsTUFBSXFCLEdBQUcsR0FBRyxzQkFBVjtBQUNBL0MsRUFBQUEsVUFBVSxDQUFDaUMsS0FBWCxDQUFpQmMsR0FBakIsRUFBc0IsVUFBVXhDLEdBQVYsRUFBZXlDLElBQWYsRUFBcUI7QUFDdkMsUUFBSXpDLEdBQUosRUFBUztBQUNMbUIsTUFBQUEsR0FBRyxDQUFDaEIsSUFBSixDQUFTO0FBQUV1QyxRQUFBQSxLQUFLLEVBQUUsSUFBVDtBQUFlQyxRQUFBQSxPQUFPLEVBQUUsbUJBQXhCO0FBQTZDM0MsUUFBQUE7QUFBN0MsT0FBVDtBQUNILEtBRkQsTUFFTztBQUNIO0FBQ0FtQixNQUFBQSxHQUFHLENBQUNoQixJQUFKLENBQVNzQyxJQUFUO0FBQ0g7QUFDSixHQVBEO0FBUUgsQ0FWRDtBQVlBakQsR0FBRyxDQUFDb0QsTUFBSixDQUFXckQsSUFBWCxFQUFpQixNQUFNc0MsT0FBTyxDQUFDQyxHQUFSLENBQWEsa0NBQWlDdkMsSUFBSyxHQUFuRCxDQUF2QiIsInNvdXJjZVJvb3QiOiJDOlxcVXNlcnNcXG1hbm9oYXJcXHdpa2lcXEdJVEhVQlxcQ1NVTEJfQ0VDU19XaWtpXFx3aWtpLWJhY2tlbmRcXCIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGV4cHJlc3MgPSByZXF1aXJlKCdleHByZXNzJyk7XHJcbmNvbnN0IGNvcnMgPSByZXF1aXJlKCdjb3JzJyk7XHJcbmNvbnN0IG15c3FsID0gcmVxdWlyZSgnbXlzcWwnKTtcclxuY29uc3QgcG9ydCA9IDUwMDBcclxuXHJcbmNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcclxuXHJcbmNvbnN0IGNvbm5lY3Rpb24gPSBteXNxbC5jcmVhdGVDb25uZWN0aW9uKHtcclxuICAgIGhvc3Q6ICdiZWFjaGNzLmNzdnpvbDl3d3VoaS51cy13ZXN0LTEucmRzLmFtYXpvbmF3cy5jb20nLFxyXG4gICAgdXNlcjogJ2FkbWluJyxcclxuICAgIHBhc3N3b3JkOiAnRmVpSG9mZm1hbjEyMycsXHJcbiAgICBkYXRhYmFzZTogJ0JlYWNoQ1MnXHJcbn0pO1xyXG5cclxuY29ubmVjdGlvbi5jb25uZWN0KGVyciA9PiB7XHJcbiAgICBpZihlcnIpIHtcclxuICAgICAgICByZXR1cm4gZXJyXHJcbiAgICB9XHJcbn0pO1xyXG5cclxuYXBwLnVzZShcclxuICAgIGNvcnMoe1xyXG4gICAgICAgIG9yaWdpbjogJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMC8nLFxyXG4gICAgfSlcclxuKTtcclxuXHJcbmFwcC51c2UoZXhwcmVzcy5qc29uKCkpO1xyXG5hcHAudXNlKGV4cHJlc3MudXJsZW5jb2RlZCh7IGV4dGVuZGVkOiBmYWxzZSB9KSk7XHJcblxyXG5sZXQgU0VMRUNUX0FfQ09VUlNFX1FVRVJZID0gYGA7XHJcbmxldCBBRERfQUNDT1VOVCA9IGBgO1xyXG5sZXQgVkVSSUZZX0FDQ09VTlQgPSBgYDtcclxubGV0IG5ld0xvZ2luID0ge307XHJcblxyXG5mdW5jdGlvbiBjcmVhdGVRdWVyeShzZWxlY3RlZENvdXJzZSkge1xyXG4gICAgU0VMRUNUX0FfQ09VUlNFX1FVRVJZID0gYFNFTEVDVCAqIEZST00gY291cnNlcyBXSEVSRSBjb3Vyc2VOYW1lID0gXCIke3NlbGVjdGVkQ291cnNlLkNvdXJzZU51bWJlcn1cImA7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFkZEFjY291bnQobmV3QWNjb3VudCkge1xyXG4gICAgQUREX0FDQ09VTlQgPSBgSU5TRVJUIElOVE8gYWRtaW5pc3RyYXRvcnMoZW1haWwsIHBhc3N3b3JkKSBWQUxVRVMoXCIke25ld0FjY291bnQuZW1haWx9XCIsIFwiJHtuZXdBY2NvdW50LnBhc3N3b3JkfVwiKWA7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZUxvZ2luKG5ld0xvZ2luKSB7XHJcbiAgICBWRVJJRllfQUNDT1VOVCA9IGBTRUxFQ1QgKiBGUk9NIGFkbWluaXN0cmF0b3JzIFdIRVJFIGVtYWlsID0gXCIke25ld0xvZ2luLmVtYWlsfVwiYDtcclxufVxyXG5cclxuYXBwLnBvc3QoJy9jcmVhdGUnLCBmdW5jdGlvbihyZXEsIHJlcykge1xyXG4gICAgbGV0IG5ld0NvdXJzZSA9IHtcclxuICAgICAgICBDb3Vyc2VOdW1iZXI6IHJlcS5ib2R5LmNvdXJzZU51bSxcclxuICAgIH07XHJcbiAgICBjcmVhdGVRdWVyeShuZXdDb3Vyc2UpO1xyXG4gICAgcmVzLnNlbmQoXCJET05FXCIpO1xyXG59KTtcclxuXHJcbmFwcC5wb3N0KCcvY3JlYXRlQWNjb3VudCcsIGZ1bmN0aW9uKHJlcSwgcmVzKSB7XHJcbiAgICBsZXQgbmV3QWNjb3VudCA9IHtcclxuICAgICAgICBlbWFpbDogcmVxLmJvZHkubmV3RW1haWwsXHJcbiAgICAgICAgcGFzc3dvcmQ6IHJlcS5ib2R5Lm5ld1Bhc3N3b3JkLFxyXG4gICAgfTtcclxuICAgIGFkZEFjY291bnQobmV3QWNjb3VudCk7XHJcbiAgICBjb25uZWN0aW9uLnF1ZXJ5KEFERF9BQ0NPVU5UKTtcclxuICAgIHJlcy5zZW5kKFwiRE9ORVwiKTtcclxufSk7XHJcblxyXG5hcHAucG9zdCgnL2NyZWF0ZUxvZ2luJywgZnVuY3Rpb24ocmVxLCByZXMpIHtcclxuICAgIG5ld0xvZ2luID0ge1xyXG4gICAgICAgIGVtYWlsOiByZXEuYm9keS5uZXdFbWFpbCxcclxuICAgICAgICBwYXNzd29yZDogcmVxLmJvZHkubmV3UGFzc3dvcmQsXHJcbiAgICB9O1xyXG4gICAgY3JlYXRlTG9naW4obmV3TG9naW4pO1xyXG4gICAgcmVzLnNlbmQoXCJET05FXCIpO1xyXG59KTtcclxuXHJcbmFwcC5nZXQoJy92ZXJpZnlMb2dpbicsIChyZXEsIHJlcykgPT4ge1xyXG4gICAgY29ubmVjdGlvbi5xdWVyeShWRVJJRllfQUNDT1VOVCwgXHJcbiAgICAgICAgZnVuY3Rpb24oZXJyLCByZXN1bHRzKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobmV3TG9naW4ucGFzc3dvcmQgIT0gcmVzdWx0c1swXS5wYXNzd29yZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiSW5jb3JyZWN0IFBhc3N3b3JkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcy5zZW5kKFwiSU5DT1JSRUNUIFBBU1NXT1JEXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAobmV3TG9naW4uZW1haWwgPT09IHJlc3VsdHNbMF0uZW1haWwgJiYgbmV3TG9naW4ucGFzc3dvcmQgPT09IHJlc3VsdHNbMF0ucGFzc3dvcmQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZW1haWwgPSByZXN1bHRzWzBdLmVtYWlsO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiU3VjY2Vzc1wiKTtcclxuICAgICAgICAgICAgICAgICAgICByZXMuc2VuZCh7ZW1haWx9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoVHlwZUVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkluY29ycmVjdCBFbWFpbFwiKTtcclxuICAgICAgICAgICAgICAgIHJlcy5zZW5kKFwiSU5DT1JSRUNUIEVNQUlMXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgKTtcclxufSk7XHJcblxyXG5hcHAuZ2V0KCcvc2VsZWN0Q291cnNlJywgKHJlcSwgcmVzKSA9PiB7XHJcbiAgICBjb25uZWN0aW9uLnF1ZXJ5KFNFTEVDVF9BX0NPVVJTRV9RVUVSWSwgXHJcbiAgICAgICAgZnVuY3Rpb24oZXJyLCByZXN1bHRzKSB7XHJcbiAgICAgICAgICAgIHZhciBjb3Vyc2VOdW1iZXIgPSByZXN1bHRzWzBdLmNvdXJzZU5hbWU7XHJcbiAgICAgICAgICAgIHZhciBjb3Vyc2VEZXNjcmlwdGlvbiA9IHJlc3VsdHNbMF0uZGVzY3JpcHRpb247XHJcbiAgICAgICAgICAgIHZhciBjb3Vyc2VQcmVyZXF1aXNpdGVzID0gcmVzdWx0c1swXS5wcmVyZXFzO1xyXG4gICAgICAgICAgICB2YXIgY291cnNlQ3JlZGl0cyA9IHJlc3VsdHNbMF0uY3JlZGl0cztcclxuICAgICAgICAgICAgcmVzLnNlbmQoeyBjb3Vyc2VOdW1iZXIsIGNvdXJzZURlc2NyaXB0aW9uLCBjb3Vyc2VQcmVyZXF1aXNpdGVzLCBjb3Vyc2VDcmVkaXRzIH0pO1xyXG4gICAgICAgIH1cclxuICAgICk7XHJcbn0pO1xyXG5cclxuYXBwLmdldCgnL2V2ZW50cycsIGZ1bmN0aW9uIChyZXEsIHJlcykge1xyXG4gICAgdmFyIHNxbCA9ICdTRUxFQ1QgKiBGUk9NIGV2ZW50cydcclxuICAgIGNvbm5lY3Rpb24ucXVlcnkoc3FsLCBmdW5jdGlvbiAoZXJyLCByb3dzKSB7XHJcbiAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgICByZXMuanNvbih7IEVycm9yOiB0cnVlLCBNZXNzYWdlOiAnRXJyb3IgRXhlY3V0ZSBTcWwnLCBlcnIgfSlcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyByZXMuanNvbih7IFwiRXJyb3JcIjogZmFsc2UsIFwiTWVzc2FnZVwiOiBcIlN1Y2Nlc3NcIiwgXCJWaXNpdG9yc1wiOiByb3dzIH0pO1xyXG4gICAgICAgICAgICByZXMuanNvbihyb3dzKVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59KTtcclxuXHJcbmFwcC5saXN0ZW4ocG9ydCwgKCkgPT4gY29uc29sZS5sb2coYEV4YW1wbGUgYXBwIGxpc3RlbmluZyBvbiBwb3J0IFwiJHtwb3J0fVwiYCkpOyJdfQ==",
    "map": {
      "version": 3,
      "sources": [
        "app.js"
      ],
      "names": [
        "express",
        "require",
        "cors",
        "mysql",
        "port",
        "app",
        "connection",
        "createConnection",
        "host",
        "user",
        "password",
        "database",
        "connect",
        "err",
        "use",
        "origin",
        "json",
        "urlencoded",
        "extended",
        "SELECT_A_COURSE_QUERY",
        "ADD_ACCOUNT",
        "VERIFY_ACCOUNT",
        "newLogin",
        "createQuery",
        "selectedCourse",
        "CourseNumber",
        "addAccount",
        "newAccount",
        "email",
        "createLogin",
        "post",
        "req",
        "res",
        "newCourse",
        "body",
        "courseNum",
        "send",
        "newEmail",
        "newPassword",
        "query",
        "get",
        "results",
        "console",
        "log",
        "TypeError",
        "courseNumber",
        "courseName",
        "courseDescription",
        "description",
        "coursePrerequisites",
        "prereqs",
        "courseCredits",
        "credits",
        "sql",
        "rows",
        "Error",
        "Message",
        "listen"
      ],
      "mappings": "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",
      "sourceRoot": "C:\\Users\\manohar\\wiki\\GITHUB\\CSULB_CECS_Wiki\\wiki-backend\\",
      "sourcesContent": [
        "const express = require('express');\r\nconst cors = require('cors');\r\nconst mysql = require('mysql');\r\nconst port = 5000\r\n\r\nconst app = express();\r\n\r\nconst connection = mysql.createConnection({\r\n    host: 'beachcs.csvzol9wwuhi.us-west-1.rds.amazonaws.com',\r\n    user: 'admin',\r\n    password: 'FeiHoffman123',\r\n    database: 'BeachCS'\r\n});\r\n\r\nconnection.connect(err => {\r\n    if(err) {\r\n        return err\r\n    }\r\n});\r\n\r\napp.use(\r\n    cors({\r\n        origin: 'http://localhost:3000/',\r\n    })\r\n);\r\n\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: false }));\r\n\r\nlet SELECT_A_COURSE_QUERY = ``;\r\nlet ADD_ACCOUNT = ``;\r\nlet VERIFY_ACCOUNT = ``;\r\nlet newLogin = {};\r\n\r\nfunction createQuery(selectedCourse) {\r\n    SELECT_A_COURSE_QUERY = `SELECT * FROM courses WHERE courseName = \"${selectedCourse.CourseNumber}\"`;\r\n}\r\n\r\nfunction addAccount(newAccount) {\r\n    ADD_ACCOUNT = `INSERT INTO administrators(email, password) VALUES(\"${newAccount.email}\", \"${newAccount.password}\")`;\r\n}\r\n\r\nfunction createLogin(newLogin) {\r\n    VERIFY_ACCOUNT = `SELECT * FROM administrators WHERE email = \"${newLogin.email}\"`;\r\n}\r\n\r\napp.post('/create', function(req, res) {\r\n    let newCourse = {\r\n        CourseNumber: req.body.courseNum,\r\n    };\r\n    createQuery(newCourse);\r\n    res.send(\"DONE\");\r\n});\r\n\r\napp.post('/createAccount', function(req, res) {\r\n    let newAccount = {\r\n        email: req.body.newEmail,\r\n        password: req.body.newPassword,\r\n    };\r\n    addAccount(newAccount);\r\n    connection.query(ADD_ACCOUNT);\r\n    res.send(\"DONE\");\r\n});\r\n\r\napp.post('/createLogin', function(req, res) {\r\n    newLogin = {\r\n        email: req.body.newEmail,\r\n        password: req.body.newPassword,\r\n    };\r\n    createLogin(newLogin);\r\n    res.send(\"DONE\");\r\n});\r\n\r\napp.get('/verifyLogin', (req, res) => {\r\n    connection.query(VERIFY_ACCOUNT, \r\n        function(err, results) {\r\n            try {\r\n                if (newLogin.password != results[0].password) {\r\n                    console.log(\"Incorrect Password\");\r\n                    res.send(\"INCORRECT PASSWORD\");\r\n                }\r\n                else if (newLogin.email === results[0].email && newLogin.password === results[0].password) {\r\n                    var email = results[0].email;\r\n                    console.log(\"Success\");\r\n                    res.send({email});\r\n                }\r\n            }\r\n            catch (TypeError) {\r\n                console.log(\"Incorrect Email\");\r\n                res.send(\"INCORRECT EMAIL\");\r\n            }\r\n        }\r\n    );\r\n});\r\n\r\napp.get('/selectCourse', (req, res) => {\r\n    connection.query(SELECT_A_COURSE_QUERY, \r\n        function(err, results) {\r\n            var courseNumber = results[0].courseName;\r\n            var courseDescription = results[0].description;\r\n            var coursePrerequisites = results[0].prereqs;\r\n            var courseCredits = results[0].credits;\r\n            res.send({ courseNumber, courseDescription, coursePrerequisites, courseCredits });\r\n        }\r\n    );\r\n});\r\n\r\napp.get('/events', function (req, res) {\r\n    var sql = 'SELECT * FROM events'\r\n    connection.query(sql, function (err, rows) {\r\n        if (err) {\r\n            res.json({ Error: true, Message: 'Error Execute Sql', err })\r\n        } else {\r\n            // res.json({ \"Error\": false, \"Message\": \"Success\", \"Visitors\": rows });\r\n            res.json(rows)\r\n        }\r\n    });\r\n});\r\n\r\napp.listen(port, () => console.log(`Example app listening on port \"${port}\"`));"
      ]
    },
    "sourceType": "module",
    "mtime": 1616870945013
  }
}